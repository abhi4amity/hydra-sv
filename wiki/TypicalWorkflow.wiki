#summary Below is a description of a typical workflow/pipeline for detecting SV breakpoints with Hydra
#labels Featured

<br>

  # *Tier 1 alignment*. Align your paired-end reads to the reference genome with a fast and reasonably sensitive aligner (e.g.,  [http://bio-bwa.sourceforge.net/ BWA]). This step serves as an initial pass towards identifying concordant pairs.
  # *Tier 2 alignment*. Grab the discordant alignments from the tier 1 BAM files and create FASTQ files for the discordant pairs.  Align the tier 1 discordant pairs with a more sensitive aligner such as [http://www.novocraft.com Novoalign] or [http://code.google.com/p/mosaik-aligner/ Mosaik] using a word size of no more than 15bp (we typically use 11-14 with Novoalign at this stage). We find this to be a necessary step as many concordant pairs are missed by BWA and can lead to false positive SV calls. At this point, you are merely trying to eliminate remaining concordant pairs.  Thus, if using Novoalign, you should use the "-r Random" alignment mode.  Below is an example for creating discordant FASTQ files from the tier1 discordant alignments:
{{{
$ samtools view -bF 0x2 <tier1.bam> | bamToFastq -bam stdin -fq1 tier1.disc.1.fq -fq2 tier1.disc.2.fq 
}}}
  # *Tier 3 alignment*.  Grab the discordant alignments from the tier 2 BAM files and create FASTQ files for the discordant pairs. Align the tier 2 discordant pairs with either the same aligner from step 2, but in this stage, we want to track all discordant alignment positions and use even more sensitive parameters such that any remaining "crypic" concordant pairs are detectable.  Retaining multiple mapping positions for the discordant pairs will allow us to detect SV involving duplicated/repetitive sequences such as segmental duplications and transposable elements.  If possible (i.e, if you have a sufficient number of CPUs), you should decrease the word size used for alignment to further eliminate remaining concordant pairs that may exist solely because a larger alignment seed was previously missed owing to sequence errors and/or polymorphism.  If using Novoalign, we recommend the following settings: -rE and -t at least 180, perhaps up to 300.
  # *Create all discordant mapping combinations for each discordant read-pair.* Use the pairDiscordants.py script to screen for remaining concordant pairs and for all discordant pairs, create the mapping combinations for SV detection with Hydra.  pairDiscordants.py allows you to set the upper (-z) and lower (-y) bound for concordants (this should be derived by plotting the alignment distance of your pairs and computing median and m.a.d. values).  It also allows you to set the maximum number of mapping positions allowed for a given discordant pair.  We typically set this to 1000 (-n).  Use the "-m hydra" option to create output that is appropriate for use with Hydra. 
{{{
$ bamToBed -i tier3.disc.bam -ed | pairDiscordants.py -i stdin -m hydra [OPTIONS] > disc.bedpe
}}}
  # *Remove PCR and sequencing duplicates.*
{{{
$ sort -k1,1 -k4,4 -k2,2n -k5,5n -k9,9 -k10,10 disc.bedpe > disc.sorted.bedpe
$ dedupDiscordants.py -i disc.sorted.bedpe [OPTIONS] > disc.deduped.bedpe
}}}
  # *Remove alignments where both ends are in simple sequence repeats (opt., but strongly suggested).* SSRs and VNTRs are hyper-variable and prone to misassembly.  Consequently, a substantial number of spurious variants are often observed owing to SSR misassembly if mappings that touch SSRs on both ends are not removed prior to Hydra. We recommend using the pairToBed utility in BEDTools to do this.
{{{
$ pairToBed -a disc.deduped.bedpe -b SSRs.bed -type notboth | cut -f 1-12 > disc.deduped.noSSR.bedpe
}}}
  # *Re-sort your discordant mappings by read-pair id*
{{{
$ sort -7,7 disc.deduped.noSSR.bedpe > disc.deduped.noSSR.sortedById.bedpe
}}}
  # *Detect SV breakpoints with Hydra*
{{{
$ hydra -i disc.deduped.noSSR.sortedById.bedpe [OPTIONS]
}}}
  # *Characterize/classify Hydra breakpoints with [http://code.google.com/p/bedtools BEDTools], Galaxy, UCSC Genome Browser, etc.* For example, use transposon annotations to distinguish true deletions in an experimental genome versus transposon insertions in the reference genome.