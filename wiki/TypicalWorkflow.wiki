#summary Below is a description of a typical workflow/pipeline for detecting SV breakpoints with Hydra
#labels Featured

<br>

  # *Tier 1 alignment*. Align your paired-end reads to the reference genome with a fast and reasonably sensitive aligner (e.g.,  [http://bio-bwa.sourceforge.net/ BWA]). This step serves as an initial pass towards identifying concordant pairs.
  # *Tier 2 alignment*. Grab the discordant alignments from the tier 1 BAM files and create FASTQ files for the discordant pairs.  Align the tier 1 discordant pairs with a more sensitive aligner such as [http://www.novocraft.com Novoalign] or [http://code.google.com/p/mosaik-aligner/ Mosaik] using a word size of no more than 15bp (we typically use 14 with Novoalign at this stage). We find this to be a necessary step as many concordant pairs are missed by BWA and can lead to false positive SV calls. At this point, you are merely trying to eliminate remaining concordant pairs.  Thus, if using Novoalign, you should use the "-r Random" alignment mode.  Below is an example for creating discordant FASTQ files from the tier1 discordant alignments:
{{{
$ samtools view -bF 0x2 <tier1.bam> | bamToFastq -bam stdin -fq1 tier1.disc.1.fq -fq2 tier1.disc.2.fq 
}}}
  # *Tier 3 alignment*.  Grab the discordant alignments from the tier 2 BAM files and create FASTQ files for the discordant pairs. Align the tier 2 discordant pairs with either the same aligner from step 2, but in this stage, we want to track all discordant alignment positions.  This will allow us to detect SV involving duplicated/repetitive sequences such as segmental duplications and transposable elements.  *Note: you may skip this step if you want to call SV exclusively in unique regions of your genome*. If possible, you should decrease the word size used for alignment to further eliminate remaining concordant pairs that may exist solely because a larger alignment seed was previously missed owing to sequence errors and/or polymorphism.
  # *Create all discordant mapping combinations for each discordant read-pair.*
{{{
$ bamToBed -i tier3.disc.bam -ed | pairDiscordants.py -i stdin -m hydra [OPTIONS] > disc.bedpe
}}}
  # *Remove PCR and sequencing duplicates.*
{{{
$ sort -k1,1 -k4,4 -k2,2n -k5,5n -k9,9 -k10,10 disc.bedpe > disc.sorted.bedpe
$ dedupBedPeButKeepBest.py -i disc.sorted.bedpe [OPTIONS] > disc.deduped.bedpe
}}}
  # *Resort your discordant mappings by read-pair id*
{{{
$ sort -7,7 disc.deduped.bedpe > disc.deduped.sortedById.bedpe
}}}
  # *Detect SV breakpoints with Hydra*
{{{
$ hydra -i disc.deduped.sortedById.bedpe [OPTIONS]
}}}